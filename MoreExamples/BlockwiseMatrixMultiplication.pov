// ===== 1 ======= 2 ======= 3 ======= 4 ======= 5 ======= 6 ======= 7 ======= 8 ======= 9 ======= 10
/*

https://github.com/t-o-k/POV-Ray-matrices

Copyright (c) 2022-2023 Tor Olav Kristensen, http://subcube.com

Use of this source code is governed by the GNU Lesser General Public License version 3,
which can be found in the LICENSE file.

*/
// ===== 1 ======= 2 ======= 3 ======= 4 ======= 5 ======= 6 ======= 7 ======= 8 ======= 9 ======= 10

// Blockwise matrix multiplication

// https://en.wikipedia.org/wiki/Block_matrix

// ===== 1 ======= 2 ======= 3 ======= 4 ======= 5 ======= 6 ======= 7 ======= 8 ======= 9 ======= 10

#version 3.7;
#include "..\matrices.inc"

global_settings { assumed_gamma 1.0 }

#declare MM =
    array[8][8] {
        {  0.4, -0.2,  0.2,  0.0,   -0.8,  0.6, -0.2,  0.2 },
        { -0.2, -0.2,  0.2,  0.2,   -0.4, -0.4,  0.0, -0.4 },
        { -0.4,  0.2,  0.6,  0.2,    0.6, -0.4, -0.4,  0.0 },
        {  0.6,  0.0,  0.0,  0.6,    0.4,  0.0, -0.4, -0.2 },

        {  0.0, -1.0,  0.4,  0.0,    0.0, -0.4, -0.6, -0.6 },
        {  0.4, -0.4,  0.8, -0.6,    0.0,  0.0, -1.0,  0.4 },
        {  0.2,  0.6, -0.6,  0.6,   -0.4,  0.2, -0.2, -0.4 },
        { -0.6,  0.4, -0.4,  0.4,    0.4, -0.4,  0.4, -0.2 }
    }
;
#declare NN =
    array[8][8] {
        { -1.097945,  1.066649, -0.612104,  0.995640,   -0.799447,  0.025037, -0.190581, -1.397306 },
        { -1.214064,  0.493395,  0.870241, -0.417638,   -0.788656, -0.423465,  0.852758, -1.969697 },
        { -0.368644,  0.689372,  1.583355, -0.100147,   -0.393249, -1.256583, -0.219287, -2.542088 },
        {  1.804368,  0.208927, -0.208927,  1.087369,   -0.018993,  0.389364, -0.636277,  2.407407 },

        { -0.597211, -1.052404,  0.597859,  0.101226,    0.343607, -0.680307, -0.080074, -0.824916 },
        {  0.478287, -2.006820,  1.552275, -0.888803,    0.884918, -1.777173,  0.553829, -1.936027 },
        { -0.533972,  0.746784,  0.162307,  0.229647,   -0.563757, -1.170250, -0.704049, -1.498316 },
        {  1.992791,  0.228352, -1.591988,  0.992187,   -0.640594,  2.223086, -1.232625,  4.377104 }
    }
;

#declare MM00 = M_SubMatrix(MM, 0, 4, 0, 4);  // 4x4 upper left
#declare MM01 = M_SubMatrix(MM, 0, 4, 4, 4);  // 4x4 upper right
#declare MM10 = M_SubMatrix(MM, 4, 4, 0, 4);  // 4x4 lower left
#declare MM11 = M_SubMatrix(MM, 4, 4, 4, 4);  // 4x4 lower right

#declare NN00 = M_SubMatrix(NN, 0, 4, 0, 4);  // 4x4 upper left
#declare NN01 = M_SubMatrix(NN, 0, 4, 4, 4);  // 4x4 upper right
#declare NN10 = M_SubMatrix(NN, 4, 4, 0, 4);  // 4x4 lower left
#declare NN11 = M_SubMatrix(NN, 4, 4, 4, 4);  // 4x4 lower right

#declare II = M_Mult(MM, NN);

#debug "\n\n"
#debug "II =\n"
M_CustomPrint(II, 9, 6, "    ", false)

// ===== 1 ======= 2 ======= 3 ======= 4 ======= 5 ======= 6 ======= 7 ======= 8 ======= 9 ======= 10

#declare II00 =  // 4x4 upper left
    M_Add(
        M_Mult(MM00, NN00),
        M_Mult(MM01, NN10)
    )
;
#declare II01 =  // 4x4 upper right
    M_Add(
        M_Mult(MM00, NN01),
        M_Mult(MM01, NN11)
    )
;
#declare II10 =  // 4x4 lower left
    M_Add(
        M_Mult(MM10, NN00),
        M_Mult(MM11, NN10)
    )
;
#declare II11 =  // 4x4 lower right
    M_Add(
        M_Mult(MM10, NN01),
        M_Mult(MM11, NN11)
    )
;

#declare II__ =
    M_Stack(
        array[2][2] {
            { II00, II01 },
            { II10, II11 }
        }
    )
;

#debug "\n\n"
#debug "II__ =\n"
M_CustomPrint(II__, 9, 6, "    ", false)

// ===== 1 ======= 2 ======= 3 ======= 4 ======= 5 ======= 6 ======= 7 ======= 8 ======= 9 ======= 10
/*

II =
    array[8][8] {
        {  1.000000, -0.000000,  0.000000, -0.000000,    0.000000,  0.000000,  0.000000,  0.000000 },
        { -0.000000,  1.000000, -0.000000,  0.000000,   -0.000000, -0.000001, -0.000000,  0.000000 },
        { -0.000000, -0.000000,  1.000000,  0.000000,   -0.000001,  0.000000,  0.000000, -0.000001 },
        { -0.000000,  0.000000, -0.000000,  1.000000,    0.000000,  0.000001,  0.000000, -0.000000 },

        {  0.000000,  0.000000, -0.000000,  0.000000,    1.000000, -0.000001,  0.000000, -0.000000 },
        {  0.000000, -0.000000,  0.000000,  0.000000,   -0.000000,  1.000000, -0.000000, -0.000001 },
        { -0.000000, -0.000000, -0.000000, -0.000000,    0.000000,  0.000000,  1.000000,  0.000000 },
        { -0.000000,  0.000000, -0.000000,  0.000000,   -0.000000, -0.000000,  0.000000,  1.000000 }
    }

II__ =
    array[8][8] {
        {  1.000000, -0.000000,  0.000000, -0.000000,    0.000000,  0.000000,  0.000000,  0.000000 },
        { -0.000000,  1.000000, -0.000000,  0.000000,   -0.000000, -0.000001, -0.000000,  0.000000 },
        { -0.000000, -0.000000,  1.000000,  0.000000,   -0.000001,  0.000000,  0.000000, -0.000001 },
        { -0.000000,  0.000000, -0.000000,  1.000000,    0.000000,  0.000001,  0.000000, -0.000000 },

        {  0.000000,  0.000000, -0.000000,  0.000000,    1.000000, -0.000001,  0.000000, -0.000000 },
        {  0.000000, -0.000000,  0.000000,  0.000000,   -0.000000,  1.000000, -0.000000, -0.000001 },
        { -0.000000, -0.000000, -0.000000, -0.000000,    0.000000,  0.000000,  1.000000,  0.000000 },
        { -0.000000,  0.000000, -0.000000,  0.000000,   -0.000000, -0.000000,  0.000000,  1.000000 }
    }

*/
// ===== 1 ======= 2 ======= 3 ======= 4 ======= 5 ======= 6 ======= 7 ======= 8 ======= 9 ======= 10

#debug "\n\n"
#error "No error, just finished!"

// ===== 1 ======= 2 ======= 3 ======= 4 ======= 5 ======= 6 ======= 7 ======= 8 ======= 9 ======= 10

